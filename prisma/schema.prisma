generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String?   @default("user")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// schema.prisma
model DevelopNote {
  id            String   @id @default(cuid())
  noteId        Int      @unique
  title         String?
  mainCategory  String?
  subCategory   Json?    // 객체(SubCategory)를 저장하기 위해 Json 타입 사용
  content       Json?    // JSONContent 배열을 저장
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("developNote")
}


// 게시글 모델
model Post {
  id         String    @id @default(uuid())
  listNumber Int
  writer     String
  title      String
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  appName    String    // 앱 이름 (예: main, sub 등)
  postType   String    // 게시글 타입 (notice, post)
  comments   Comment[]

  @@map("posts")
  @@index([appName, postType]) // 검색 성능 향상을 위한 인덱스
}

// 댓글 모델
model Comment {
  id        String   @id @default(uuid())
  writer    String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  replies   Reply[]

  @@map("comments")
}

// 답글 모델
model Reply {
  id        String   @id @default(uuid())
  personId  String?  @map("person_id")
  writer    String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  commentId String   @map("comment_id")
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("replies")
}